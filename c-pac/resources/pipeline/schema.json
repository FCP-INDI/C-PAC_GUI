{
  "FROM": {
    "Any": [
      {
        "type": "str"
      },
      null
    ]
  },
  "pipeline_setup": {
    "pipeline_name": {
      "All": [
        {
          "type": "str"
        },
        "Length(min=1, max=None)"
      ]
    },
    "output_directory": {
      "path": {
        "type": "str"
      },
      "source_outputs_dir": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "pull_source_once": {
        "type": "bool"
      },
      "write_func_outputs": {
        "type": "bool"
      },
      "write_debugging_outputs": {
        "type": "bool"
      },
      "output_tree": {
        "type": "str"
      },
      "generate_quality_control_images": {
        "type": "bool"
      }
    },
    "working_directory": {
      "path": {
        "type": "str"
      },
      "remove_working_dir": {
        "type": "bool"
      }
    },
    "log_directory": {
      "run_logging": {
        "type": "bool"
      },
      "path": {
        "type": "str"
      }
    },
    "crash_log_directory": {
      "path": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      }
    },
    "system_config": {
      "FSLDIR": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "on_grid": {
        "run": {
          "type": "bool"
        },
        "resource_manager": {
          "Any": [
            {
              "type": "str"
            },
            null
          ]
        },
        "SGE": {
          "parallel_environment": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "queue": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          }
        }
      },
      "maximum_memory_per_participant": {
        "Any": [
          {
            "type": "float"
          },
          {
            "type": "int"
          },
          {
            "All": [
              {
                "type": "str"
              },
              {
                "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
              }
            ]
          }
        ]
      },
      "max_cores_per_participant": {
        "type": "int"
      },
      "num_ants_threads": {
        "type": "int"
      },
      "num_OMP_threads": {
        "type": "int"
      },
      "num_participants_at_once": {
        "type": "int"
      }
    },
    "Amazon-AWS": {
      "aws_output_bucket_credentials": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "s3_encryption": {
        "type": "bool"
      }
    },
    "Debugging": {
      "verbose": {
        "type": "bool"
      }
    }
  },
  "anatomical_preproc": {
    "run": {
      "type": "bool"
    },
    "run_t2": {
      "type": "bool"
    },
    "non_local_means_filtering": {
      "run": {
        "Any": [
          {
            "type": "bool"
          },
          [
            {
              "type": "bool"
            }
          ]
        ]
      },
      "noise_model": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      }
    },
    "n4_bias_field_correction": {
      "run": {
        "Any": [
          {
            "type": "bool"
          },
          [
            {
              "type": "bool"
            }
          ]
        ]
      },
      "shrink_factor": {
        "type": "int"
      }
    },
    "t1t2_bias_field_correction": {
      "Any": [
        {
          "run": false,
          "BiasFieldSmoothingSigma": {
            "Any": [
              {
                "type": "int"
              },
              null
            ]
          }
        },
        {
          "run": true,
          "BiasFieldSmoothingSigma": {
            "Any": [
              {
                "type": "int"
              },
              null
            ]
          }
        }
      ]
    },
    "acpc_alignment": {
      "Any": [
        {
          "run": false,
          "run_before_preproc": {
            "Any": [
              {
                "type": "bool"
              },
              null
            ]
          },
          "brain_size": {
            "Any": [
              {
                "type": "int"
              },
              null
            ]
          },
          "FOV_crop": {
            "Any": [
              {
                "In": {
                  "set": [
                    "flirt",
                    "robustfov"
                  ]
                }
              },
              null
            ]
          },
          "acpc_target": {
            "Any": [
              {
                "In": [
                  "brain",
                  "whole-head"
                ]
              },
              null
            ]
          },
          "T1w_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "T1w_brain_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "T2w_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "T2w_brain_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          }
        },
        {
          "run": true,
          "run_before_preproc": {
            "type": "bool"
          },
          "brain_size": {
            "type": "int"
          },
          "FOV_crop": {
            "In": {
              "set": [
                "flirt",
                "robustfov"
              ]
            }
          },
          "acpc_target": "whole-head",
          "T1w_ACPC_template": {
            "type": "str"
          },
          "T1w_brain_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "T2w_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "T2w_brain_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          }
        },
        {
          "run": true,
          "run_before_preproc": {
            "type": "bool"
          },
          "brain_size": {
            "type": "int"
          },
          "FOV_crop": {
            "In": {
              "set": [
                "flirt",
                "robustfov"
              ]
            }
          },
          "acpc_target": "brain",
          "T1w_ACPC_template": {
            "type": "str"
          },
          "T1w_brain_ACPC_template": {
            "type": "str"
          },
          "T2w_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "T2w_brain_ACPC_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          }
        }
      ]
    },
    "brain_extraction": {
      "run": {
        "type": "bool"
      },
      "using": [
        {
          "In": [
            "3dSkullStrip",
            "BET",
            "UNet",
            "niworkflows-ants",
            "FreeSurfer-BET-Tight",
            "FreeSurfer-BET-Loose",
            "FreeSurfer-ABCD"
          ]
        }
      ],
      "AFNI-3dSkullStrip": {
        "mask_vol": {
          "type": "bool"
        },
        "shrink_factor": {
          "Any": [
            {
              "type": "float"
            },
            {
              "type": "int"
            },
            {
              "All": [
                {
                  "type": "str"
                },
                {
                  "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                }
              ]
            }
          ]
        },
        "var_shrink_fac": {
          "type": "bool"
        },
        "shrink_factor_bot_lim": {
          "Any": [
            {
              "type": "float"
            },
            {
              "type": "int"
            },
            {
              "All": [
                {
                  "type": "str"
                },
                {
                  "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                }
              ]
            }
          ]
        },
        "avoid_vent": {
          "type": "bool"
        },
        "n_iterations": {
          "type": "int"
        },
        "pushout": {
          "type": "bool"
        },
        "touchup": {
          "type": "bool"
        },
        "fill_hole": {
          "type": "int"
        },
        "NN_smooth": {
          "type": "int"
        },
        "smooth_final": {
          "type": "int"
        },
        "avoid_eyes": {
          "type": "bool"
        },
        "use_edge": {
          "type": "bool"
        },
        "exp_frac": {
          "Any": [
            {
              "type": "float"
            },
            {
              "type": "int"
            },
            {
              "All": [
                {
                  "type": "str"
                },
                {
                  "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                }
              ]
            }
          ]
        },
        "push_to_edge": {
          "type": "bool"
        },
        "use_skull": {
          "type": "bool"
        },
        "perc_int": {
          "Any": [
            {
              "type": "float"
            },
            {
              "type": "int"
            },
            {
              "All": [
                {
                  "type": "str"
                },
                {
                  "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                }
              ]
            }
          ]
        },
        "max_inter_iter": {
          "type": "int"
        },
        "fac": {
          "Any": [
            {
              "type": "float"
            },
            {
              "type": "int"
            },
            {
              "All": [
                {
                  "type": "str"
                },
                {
                  "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                }
              ]
            }
          ]
        },
        "blur_fwhm": {
          "Any": [
            {
              "type": "float"
            },
            {
              "type": "int"
            },
            {
              "All": [
                {
                  "type": "str"
                },
                {
                  "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                }
              ]
            }
          ]
        },
        "monkey": {
          "type": "bool"
        }
      },
      "FSL-FNIRT": {
        "interpolation": {
          "In": {
            "set": [
              "spline",
              "sinc",
              "trilinear"
            ]
          }
        }
      },
      "FSL-BET": {
        "frac": {
          "Any": [
            {
              "type": "float"
            },
            {
              "type": "int"
            },
            {
              "All": [
                {
                  "type": "str"
                },
                {
                  "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                }
              ]
            }
          ]
        },
        "mask_boolean": {
          "type": "bool"
        },
        "mesh_boolean": {
          "type": "bool"
        },
        "outline": {
          "type": "bool"
        },
        "padding": {
          "type": "bool"
        },
        "radius": {
          "type": "int"
        },
        "reduce_bias": {
          "type": "bool"
        },
        "remove_eyes": {
          "type": "bool"
        },
        "robust": {
          "type": "bool"
        },
        "skull": {
          "type": "bool"
        },
        "surfaces": {
          "type": "bool"
        },
        "threshold": {
          "type": "bool"
        },
        "vertical_gradient": "Range(min=-1, max=1, min_included=True, max_included=True, msg=None)"
      },
      "UNet": {
        "unet_model": {
          "type": "str"
        }
      },
      "niworkflows-ants": {
        "template_path": {
          "type": "str"
        },
        "mask_path": {
          "type": "str"
        },
        "regmask_path": {
          "type": "str"
        }
      },
      "FreeSurfer-BET": {
        "T1w_brain_template_mask_ccs": {
          "type": "str"
        }
      }
    }
  },
  "segmentation": {
    "run": {
      "type": "bool"
    },
    "tissue_segmentation": {
      "using": [
        {
          "In": {
            "set": [
              "FreeSurfer",
              "FSL-FAST",
              "Template_Based",
              "ANTs_Prior_Based"
            ]
          }
        }
      ],
      "FSL-FAST": {
        "thresholding": {
          "use": {
            "In": {
              "set": [
                "Auto",
                "Custom"
              ]
            }
          },
          "Custom": {
            "CSF_threshold_value": {
              "type": "float"
            },
            "WM_threshold_value": {
              "type": "float"
            },
            "GM_threshold_value": {
              "type": "float"
            }
          }
        },
        "use_priors": {
          "run": {
            "type": "bool"
          },
          "priors_path": {
            "type": "str"
          },
          "WM_path": {
            "type": "str"
          },
          "GM_path": {
            "type": "str"
          },
          "CSF_path": {
            "type": "str"
          }
        }
      },
      "FreeSurfer": {
        "erode": {
          "type": "int"
        },
        "CSF_label": [
          {
            "type": "int"
          }
        ],
        "GM_label": [
          {
            "type": "int"
          }
        ],
        "WM_label": [
          {
            "type": "int"
          }
        ]
      },
      "ANTs_Prior_Based": {
        "run": {
          "Any": [
            {
              "type": "bool"
            },
            [
              {
                "type": "bool"
              }
            ]
          ]
        },
        "template_brain_list": [
          {
            "type": "str"
          }
        ],
        "template_segmentation_list": [
          {
            "type": "str"
          }
        ],
        "CSF_label": [
          {
            "type": "int"
          }
        ],
        "GM_label": [
          {
            "type": "int"
          }
        ],
        "WM_label": [
          {
            "type": "int"
          }
        ]
      },
      "Template_Based": {
        "run": {
          "Any": [
            {
              "type": "bool"
            },
            [
              {
                "type": "bool"
              }
            ]
          ]
        },
        "template_for_segmentation": [
          {
            "In": [
              "EPI_Template",
              "T1_Template"
            ]
          }
        ],
        "WHITE": {
          "type": "str"
        },
        "GRAY": {
          "type": "str"
        },
        "CSF": {
          "type": "str"
        }
      }
    }
  },
  "registration_workflows": {
    "anatomical_registration": {
      "run": {
        "type": "bool"
      },
      "resolution_for_anat": {
        "All": [
          {
            "type": "str"
          },
          {
            "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
          }
        ]
      },
      "T1w_brain_template": {
        "type": "str"
      },
      "T1w_template": {
        "type": "str"
      },
      "T1w_brain_template_mask": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "reg_with_skull": {
        "type": "bool"
      },
      "registration": {
        "using": [
          {
            "In": {
              "set": [
                "ANTS",
                "FSL-linear",
                "FSL"
              ]
            }
          }
        ],
        "ANTs": {
          "use_lesion_mask": {
            "type": "bool"
          },
          "T1_registration": {
            "Any": [
              [
                {
                  "Any": [
                    {
                      "collapse-output-transforms": {
                        "type": "int"
                      }
                    },
                    {
                      "dimensionality": {
                        "type": "int"
                      }
                    },
                    {
                      "initial-moving-transform": {
                        "initializationFeature": {
                          "type": "int"
                        }
                      }
                    },
                    {
                      "transforms": [
                        {
                          "Any": [
                            {
                              "Rigid": {
                                "gradientStep": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "metric": {
                                  "type": {
                                    "type": "str"
                                  },
                                  "metricWeight": {
                                    "type": "int"
                                  },
                                  "numberOfBins": {
                                    "type": "int"
                                  },
                                  "samplingStrategy": {
                                    "type": "str"
                                  },
                                  "samplingPercentage": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "radius": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "convergence": {
                                  "iteration": {
                                    "All": [
                                      {
                                        "type": "str"
                                      },
                                      {
                                        "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                      }
                                    ]
                                  },
                                  "convergenceThreshold": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "convergenceWindowSize": {
                                    "type": "int"
                                  }
                                },
                                "smoothing-sigmas": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "shrink-factors": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "use-histogram-matching": {
                                  "type": "bool"
                                },
                                "updateFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "totalFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "winsorize-image-intensities": {
                                  "lowerQuantile": {
                                    "type": "float"
                                  },
                                  "upperQuantile": {
                                    "type": "float"
                                  }
                                }
                              }
                            },
                            {
                              "Affine": {
                                "gradientStep": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "metric": {
                                  "type": {
                                    "type": "str"
                                  },
                                  "metricWeight": {
                                    "type": "int"
                                  },
                                  "numberOfBins": {
                                    "type": "int"
                                  },
                                  "samplingStrategy": {
                                    "type": "str"
                                  },
                                  "samplingPercentage": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "radius": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "convergence": {
                                  "iteration": {
                                    "All": [
                                      {
                                        "type": "str"
                                      },
                                      {
                                        "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                      }
                                    ]
                                  },
                                  "convergenceThreshold": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "convergenceWindowSize": {
                                    "type": "int"
                                  }
                                },
                                "smoothing-sigmas": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "shrink-factors": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "use-histogram-matching": {
                                  "type": "bool"
                                },
                                "updateFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "totalFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "winsorize-image-intensities": {
                                  "lowerQuantile": {
                                    "type": "float"
                                  },
                                  "upperQuantile": {
                                    "type": "float"
                                  }
                                }
                              }
                            },
                            {
                              "SyN": {
                                "gradientStep": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "metric": {
                                  "type": {
                                    "type": "str"
                                  },
                                  "metricWeight": {
                                    "type": "int"
                                  },
                                  "numberOfBins": {
                                    "type": "int"
                                  },
                                  "samplingStrategy": {
                                    "type": "str"
                                  },
                                  "samplingPercentage": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "radius": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "convergence": {
                                  "iteration": {
                                    "All": [
                                      {
                                        "type": "str"
                                      },
                                      {
                                        "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                      }
                                    ]
                                  },
                                  "convergenceThreshold": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "convergenceWindowSize": {
                                    "type": "int"
                                  }
                                },
                                "smoothing-sigmas": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "shrink-factors": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "use-histogram-matching": {
                                  "type": "bool"
                                },
                                "updateFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "totalFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "winsorize-image-intensities": {
                                  "lowerQuantile": {
                                    "type": "float"
                                  },
                                  "upperQuantile": {
                                    "type": "float"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "verbose": {
                        "Any": [
                          {
                            "type": "bool"
                          },
                          {
                            "In": {
                              "set": [
                                0,
                                1
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "float": {
                        "Any": [
                          {
                            "type": "bool"
                          },
                          {
                            "In": {
                              "set": [
                                0,
                                1
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "masks": {
                        "fixed_image_mask": {
                          "type": "bool"
                        },
                        "moving_image_mask": {
                          "type": "bool"
                        }
                      }
                    },
                    {
                      "type": "dict"
                    }
                  ]
                }
              ],
              null
            ]
          },
          "interpolation": {
            "In": {
              "set": [
                "BSpline",
                "LanczosWindowedSinc",
                "Linear"
              ]
            }
          }
        },
        "FSL-FNIRT": {
          "fnirt_config": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "ref_resolution": {
            "All": [
              {
                "type": "str"
              },
              {
                "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
              }
            ]
          },
          "FNIRT_T1w_brain_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "FNIRT_T1w_template": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "interpolation": {
            "In": {
              "set": [
                "spline",
                "sinc",
                "trilinear"
              ]
            }
          },
          "identity_matrix": {
            "type": "str"
          },
          "ref_mask": {
            "type": "str"
          },
          "ref_mask_res-2": {
            "type": "str"
          },
          "T1w_template_res-2": {
            "type": "str"
          }
        }
      },
      "overwrite_transform": {
        "run": {
          "type": "bool"
        },
        "using": {
          "In": {
            "set": [
              "FSL"
            ]
          }
        }
      }
    },
    "functional_registration": {
      "coregistration": {
        "run": {
          "type": "bool"
        },
        "reference": {
          "In": {
            "set": [
              "brain",
              "restore-brain"
            ]
          }
        },
        "interpolation": {
          "type": "str"
        },
        "using": {
          "type": "str"
        },
        "input": {
          "type": "str"
        },
        "cost": {
          "type": "str"
        },
        "dof": {
          "type": "int"
        },
        "arguments": {
          "Any": [
            {
              "type": "str"
            },
            null
          ]
        },
        "func_input_prep": {
          "reg_with_skull": {
            "type": "bool"
          },
          "input": [
            {
              "In": {
                "set": [
                  "Mean_Functional",
                  "fmriprep_reference",
                  "Selected_Functional_Volume"
                ]
              }
            }
          ],
          "Mean Functional": {
            "n4_correct_func": {
              "type": "bool"
            }
          },
          "Selected Functional Volume": {
            "func_reg_input_volume": {
              "type": "int"
            }
          }
        },
        "boundary_based_registration": {
          "run": {
            "Any": [
              {
                "type": "bool"
              },
              [
                {
                  "type": "bool"
                }
              ]
            ]
          },
          "bbr_schedule": {
            "type": "str"
          },
          "bbr_wm_map": {
            "In": {
              "set": [
                "probability_map",
                "partial_volume_map"
              ]
            }
          },
          "bbr_wm_mask_args": {
            "type": "str"
          },
          "reference": {
            "In": {
              "set": [
                "brain",
                "whole-head"
              ]
            }
          }
        }
      },
      "EPI_registration": {
        "run": {
          "type": "bool"
        },
        "using": [
          {
            "In": {
              "set": [
                "ANTS",
                "FSL-linear",
                "FSL"
              ]
            }
          }
        ],
        "EPI_template": {
          "type": "str"
        },
        "EPI_template_mask": {
          "Any": [
            {
              "type": "str"
            },
            null
          ]
        },
        "ANTs": {
          "parameters": {
            "Any": [
              [
                {
                  "Any": [
                    {
                      "collapse-output-transforms": {
                        "type": "int"
                      }
                    },
                    {
                      "dimensionality": {
                        "type": "int"
                      }
                    },
                    {
                      "initial-moving-transform": {
                        "initializationFeature": {
                          "type": "int"
                        }
                      }
                    },
                    {
                      "transforms": [
                        {
                          "Any": [
                            {
                              "Rigid": {
                                "gradientStep": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "metric": {
                                  "type": {
                                    "type": "str"
                                  },
                                  "metricWeight": {
                                    "type": "int"
                                  },
                                  "numberOfBins": {
                                    "type": "int"
                                  },
                                  "samplingStrategy": {
                                    "type": "str"
                                  },
                                  "samplingPercentage": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "radius": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "convergence": {
                                  "iteration": {
                                    "All": [
                                      {
                                        "type": "str"
                                      },
                                      {
                                        "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                      }
                                    ]
                                  },
                                  "convergenceThreshold": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "convergenceWindowSize": {
                                    "type": "int"
                                  }
                                },
                                "smoothing-sigmas": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "shrink-factors": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "use-histogram-matching": {
                                  "type": "bool"
                                },
                                "updateFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "totalFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "winsorize-image-intensities": {
                                  "lowerQuantile": {
                                    "type": "float"
                                  },
                                  "upperQuantile": {
                                    "type": "float"
                                  }
                                }
                              }
                            },
                            {
                              "Affine": {
                                "gradientStep": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "metric": {
                                  "type": {
                                    "type": "str"
                                  },
                                  "metricWeight": {
                                    "type": "int"
                                  },
                                  "numberOfBins": {
                                    "type": "int"
                                  },
                                  "samplingStrategy": {
                                    "type": "str"
                                  },
                                  "samplingPercentage": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "radius": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "convergence": {
                                  "iteration": {
                                    "All": [
                                      {
                                        "type": "str"
                                      },
                                      {
                                        "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                      }
                                    ]
                                  },
                                  "convergenceThreshold": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "convergenceWindowSize": {
                                    "type": "int"
                                  }
                                },
                                "smoothing-sigmas": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "shrink-factors": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "use-histogram-matching": {
                                  "type": "bool"
                                },
                                "updateFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "totalFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "winsorize-image-intensities": {
                                  "lowerQuantile": {
                                    "type": "float"
                                  },
                                  "upperQuantile": {
                                    "type": "float"
                                  }
                                }
                              }
                            },
                            {
                              "SyN": {
                                "gradientStep": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "metric": {
                                  "type": {
                                    "type": "str"
                                  },
                                  "metricWeight": {
                                    "type": "int"
                                  },
                                  "numberOfBins": {
                                    "type": "int"
                                  },
                                  "samplingStrategy": {
                                    "type": "str"
                                  },
                                  "samplingPercentage": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "radius": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "convergence": {
                                  "iteration": {
                                    "All": [
                                      {
                                        "type": "str"
                                      },
                                      {
                                        "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                      }
                                    ]
                                  },
                                  "convergenceThreshold": {
                                    "Any": [
                                      {
                                        "type": "float"
                                      },
                                      {
                                        "type": "int"
                                      },
                                      {
                                        "All": [
                                          {
                                            "type": "str"
                                          },
                                          {
                                            "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "convergenceWindowSize": {
                                    "type": "int"
                                  }
                                },
                                "smoothing-sigmas": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "shrink-factors": {
                                  "All": [
                                    {
                                      "type": "str"
                                    },
                                    {
                                      "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                                    }
                                  ]
                                },
                                "use-histogram-matching": {
                                  "type": "bool"
                                },
                                "updateFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "totalFieldVarianceInVoxelSpace": {
                                  "Any": [
                                    {
                                      "type": "float"
                                    },
                                    {
                                      "type": "int"
                                    },
                                    {
                                      "All": [
                                        {
                                          "type": "str"
                                        },
                                        {
                                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "winsorize-image-intensities": {
                                  "lowerQuantile": {
                                    "type": "float"
                                  },
                                  "upperQuantile": {
                                    "type": "float"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "verbose": {
                        "Any": [
                          {
                            "type": "bool"
                          },
                          {
                            "In": {
                              "set": [
                                0,
                                1
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "float": {
                        "Any": [
                          {
                            "type": "bool"
                          },
                          {
                            "In": {
                              "set": [
                                0,
                                1
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "masks": {
                        "fixed_image_mask": {
                          "type": "bool"
                        },
                        "moving_image_mask": {
                          "type": "bool"
                        }
                      }
                    },
                    {
                      "type": "dict"
                    }
                  ]
                }
              ],
              null
            ]
          },
          "interpolation": {
            "In": {
              "set": [
                "BSpline",
                "LanczosWindowedSinc",
                "Linear"
              ]
            }
          }
        },
        "FSL-FNIRT": {
          "fnirt_config": {
            "Any": [
              {
                "type": "str"
              },
              null
            ]
          },
          "interpolation": {
            "In": {
              "set": [
                "spline",
                "sinc",
                "trilinear"
              ]
            }
          },
          "identity_matrix": {
            "type": "str"
          }
        }
      },
      "func_registration_to_template": {
        "run": {
          "type": "bool"
        },
        "run_EPI": {
          "type": "bool"
        },
        "output_resolution": {
          "func_preproc_outputs": {
            "All": [
              {
                "type": "str"
              },
              {
                "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
              }
            ]
          },
          "func_derivative_outputs": {
            "All": [
              {
                "type": "str"
              },
              {
                "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
              }
            ]
          }
        },
        "target_template": {
          "using": [
            {
              "In": {
                "set": [
                  "EPI_template",
                  "T1_template"
                ]
              }
            }
          ],
          "T1_template": {
            "T1w_brain_template_funcreg": {
              "type": "str"
            },
            "T1w_template_funcreg": {
              "Any": [
                {
                  "type": "str"
                },
                null
              ]
            },
            "T1w_brain_template_mask_funcreg": {
              "Any": [
                {
                  "type": "str"
                },
                null
              ]
            },
            "T1w_template_for_resample": {
              "Any": [
                {
                  "type": "str"
                },
                null
              ]
            }
          },
          "EPI_template": {
            "EPI_template_funcreg": {
              "type": "str"
            },
            "EPI_template_mask_funcreg": {
              "Any": [
                {
                  "type": "str"
                },
                null
              ]
            },
            "EPI_template_for_resample": {
              "Any": [
                {
                  "type": "str"
                },
                null
              ]
            }
          }
        },
        "ANTs_pipelines": {
          "interpolation": {
            "In": {
              "set": [
                "BSpline",
                "LanczosWindowedSinc",
                "Linear"
              ]
            }
          }
        },
        "FNIRT_pipelines": {
          "interpolation": {
            "In": {
              "set": [
                "spline",
                "sinc",
                "trilinear"
              ]
            }
          },
          "identity_matrix": {
            "type": "str"
          }
        },
        "apply_transform": {
          "using": {
            "In": {
              "set": [
                "single_step_resampling",
                "default",
                "abcd",
                "dcan_nhp"
              ]
            }
          }
        }
      }
    }
  },
  "surface_analysis": {
    "freesurfer": {
      "run": {
        "type": "bool"
      },
      "reconall_args": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      }
    },
    "post_freesurfer": {
      "run": {
        "type": "bool"
      },
      "surf_atlas_dir": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "gray_ordinates_dir": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "gray_ordinates_res": {
        "Any": [
          {
            "type": "int"
          },
          null
        ]
      },
      "high_res_mesh": {
        "Any": [
          {
            "type": "int"
          },
          null
        ]
      },
      "low_res_mesh": {
        "Any": [
          {
            "type": "int"
          },
          null
        ]
      },
      "subcortical_gray_labels": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "freesurfer_labels": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "fmri_res": {
        "Any": [
          {
            "type": "int"
          },
          null
        ]
      },
      "smooth_fwhm": {
        "Any": [
          {
            "type": "int"
          },
          null
        ]
      }
    }
  },
  "longitudinal_template_generation": {
    "run": {
      "type": "bool"
    },
    "average_method": {
      "In": {
        "set": [
          "mean",
          "std",
          "median"
        ]
      }
    },
    "dof": {
      "In": {
        "set": [
          9,
          12,
          6,
          7
        ]
      }
    },
    "interp": {
      "In": {
        "set": [
          "spline",
          "nearestneighbour",
          "sinc",
          "trilinear"
        ]
      }
    },
    "cost": {
      "In": {
        "set": [
          "labeldiff",
          "bbr",
          "corratio",
          "normcorr",
          "normmi",
          "mutualinfo",
          "leastsq"
        ]
      }
    },
    "thread_pool": {
      "type": "int"
    },
    "convergence_threshold": {
      "Any": [
        {
          "type": "float"
        },
        {
          "type": "int"
        },
        {
          "All": [
            {
              "type": "str"
            },
            {
              "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
            }
          ]
        }
      ]
    }
  },
  "functional_preproc": {
    "run": {
      "type": "bool"
    },
    "truncation": {
      "start_tr": {
        "type": "int"
      },
      "stop_tr": {
        "Any": [
          {
            "Any": [
              {
                "type": "int"
              },
              "End"
            ]
          },
          null
        ]
      }
    },
    "scaling": {
      "run": {
        "type": "bool"
      },
      "scaling_factor": {
        "Any": [
          {
            "type": "float"
          },
          {
            "type": "int"
          },
          {
            "All": [
              {
                "type": "str"
              },
              {
                "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
              }
            ]
          }
        ]
      }
    },
    "despiking": {
      "run": {
        "Any": [
          {
            "type": "bool"
          },
          [
            {
              "type": "bool"
            }
          ]
        ]
      }
    },
    "slice_timing_correction": {
      "run": {
        "Any": [
          {
            "type": "bool"
          },
          [
            {
              "type": "bool"
            }
          ]
        ]
      },
      "tpattern": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "tzero": {
        "Any": [
          {
            "type": "int"
          },
          null
        ]
      }
    },
    "motion_estimates_and_correction": {
      "motion_estimates": {
        "calculate_motion_first": {
          "type": "bool"
        },
        "calculate_motion_after": {
          "type": "bool"
        }
      },
      "motion_correction": {
        "using": [
          {
            "In": {
              "set": [
                "3dvolreg",
                "mcflirt"
              ]
            }
          }
        ],
        "AFNI-3dvolreg": {
          "functional_volreg_twopass": {
            "type": "bool"
          }
        },
        "motion_correction_reference": [
          {
            "In": {
              "set": [
                "fmriprep_reference",
                "mean",
                "selected_volume",
                "median"
              ]
            }
          }
        ],
        "motion_correction_reference_volume": {
          "type": "int"
        }
      },
      "motion_estimate_filter": {
        "Any": [
          {
            "run": {
              "Any": [
                {
                  "Any": [
                    {
                      "ExactSequence": [
                        false
                      ]
                    },
                    {
                      "ExactSequence": []
                    },
                    false
                  ]
                },
                null
              ]
            },
            "filter_type": {
              "Any": [
                {
                  "In": {
                    "set": [
                      "notch",
                      "lowpass"
                    ]
                  }
                },
                null
              ]
            },
            "filter_order": {
              "Any": [
                {
                  "type": "int"
                },
                null
              ]
            },
            "breathing_rate_min": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "breathing_rate_max": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "center_frequency": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "filter_bandwidth": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "lowpass_cutoff": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            }
          },
          {
            "run": {
              "Any": [
                {
                  "type": "bool"
                },
                [
                  {
                    "type": "bool"
                  }
                ]
              ]
            },
            "filter_type": "notch",
            "filter_order": {
              "type": "int"
            },
            "breathing_rate_min": {
              "Any": [
                {
                  "type": "float"
                },
                {
                  "type": "int"
                },
                {
                  "All": [
                    {
                      "type": "str"
                    },
                    {
                      "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                    }
                  ]
                }
              ]
            },
            "breathing_rate_max": {
              "Any": [
                {
                  "type": "float"
                },
                {
                  "type": "int"
                },
                {
                  "All": [
                    {
                      "type": "str"
                    },
                    {
                      "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                    }
                  ]
                }
              ]
            },
            "center_frequency": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "filter_bandwidth": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "lowpass_cutoff": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            }
          },
          {
            "run": {
              "Any": [
                {
                  "type": "bool"
                },
                [
                  {
                    "type": "bool"
                  }
                ]
              ]
            },
            "filter_type": "notch",
            "filter_order": {
              "type": "int"
            },
            "breathing_rate_min": null,
            "breathing_rate_max": null,
            "center_frequency": {
              "Any": [
                {
                  "type": "float"
                },
                {
                  "type": "int"
                },
                {
                  "All": [
                    {
                      "type": "str"
                    },
                    {
                      "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                    }
                  ]
                }
              ]
            },
            "filter_bandwidth": {
              "Any": [
                {
                  "type": "float"
                },
                {
                  "type": "int"
                },
                {
                  "All": [
                    {
                      "type": "str"
                    },
                    {
                      "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                    }
                  ]
                }
              ]
            },
            "lowpass_cutoff": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            }
          },
          {
            "run": {
              "Any": [
                {
                  "type": "bool"
                },
                [
                  {
                    "type": "bool"
                  }
                ]
              ]
            },
            "filter_type": "lowpass",
            "filter_order": {
              "type": "int"
            },
            "breathing_rate_min": {
              "Any": [
                {
                  "type": "float"
                },
                {
                  "type": "int"
                },
                {
                  "All": [
                    {
                      "type": "str"
                    },
                    {
                      "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                    }
                  ]
                }
              ]
            },
            "breathing_rate_max": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "center_frequency": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "filter_bandwidth": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "lowpass_cutoff": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            }
          },
          {
            "run": {
              "Any": [
                {
                  "type": "bool"
                },
                [
                  {
                    "type": "bool"
                  }
                ]
              ]
            },
            "filter_type": "lowpass",
            "filter_order": {
              "type": "int"
            },
            "breathing_rate_min": null,
            "breathing_rate_max": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "center_frequency": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "filter_bandwidth": {
              "Any": [
                {
                  "Any": [
                    {
                      "type": "float"
                    },
                    {
                      "type": "int"
                    },
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                        }
                      ]
                    }
                  ]
                },
                null
              ]
            },
            "lowpass_cutoff": {
              "Any": [
                {
                  "type": "float"
                },
                {
                  "type": "int"
                },
                {
                  "All": [
                    {
                      "type": "str"
                    },
                    {
                      "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "distortion_correction": {
      "run": {
        "Any": [
          {
            "type": "bool"
          },
          [
            {
              "type": "bool"
            }
          ]
        ]
      },
      "using": [
        {
          "In": [
            "PhaseDiff",
            "Blip"
          ]
        }
      ],
      "PhaseDiff": {
        "fmap_skullstrip_option": {
          "In": [
            "BET",
            "AFNI"
          ]
        },
        "fmap_skullstrip_BET_frac": {
          "type": "float"
        },
        "fmap_skullstrip_AFNI_threshold": {
          "type": "float"
        }
      }
    },
    "func_masking": {
      "using": [
        {
          "In": [
            "AFNI",
            "FSL",
            "FSL_AFNI",
            "Anatomical_Refined",
            "Anatomical_Based",
            "Anatomical_Resampled",
            "CCS_Anatomical_Refined"
          ]
        }
      ],
      "FSL-BET": {
        "Any": [
          {
            "frac": {
              "type": "float"
            },
            "mesh_boolean": {
              "type": "bool"
            },
            "outline": {
              "type": "bool"
            },
            "radius": {
              "type": "int"
            },
            "skull": {
              "type": "bool"
            },
            "threshold": {
              "type": "bool"
            },
            "vertical_gradient": "Range(min=-1, max=1, min_included=False, max_included=False, msg=None)",
            "functional_mean_thr": {
              "run": {
                "type": "bool"
              },
              "threshold_value": {
                "Any": [
                  {
                    "type": "int"
                  },
                  null
                ]
              }
            },
            "functional_mean_bias_correction": {
              "type": "bool"
            },
            "functional_mean_boolean": true,
            "reduce_bias": true,
            "robust": false,
            "padding": false,
            "remove_eyes": false,
            "surfaces": false
          },
          {
            "frac": {
              "type": "float"
            },
            "mesh_boolean": {
              "type": "bool"
            },
            "outline": {
              "type": "bool"
            },
            "radius": {
              "type": "int"
            },
            "skull": {
              "type": "bool"
            },
            "threshold": {
              "type": "bool"
            },
            "vertical_gradient": "Range(min=-1, max=1, min_included=False, max_included=False, msg=None)",
            "functional_mean_thr": {
              "run": {
                "type": "bool"
              },
              "threshold_value": {
                "Any": [
                  {
                    "type": "int"
                  },
                  null
                ]
              }
            },
            "functional_mean_bias_correction": {
              "type": "bool"
            },
            "functional_mean_boolean": true,
            "robust": true,
            "reduce_bias": false,
            "padding": false,
            "remove_eyes": false,
            "surfaces": false
          },
          {
            "frac": {
              "type": "float"
            },
            "mesh_boolean": {
              "type": "bool"
            },
            "outline": {
              "type": "bool"
            },
            "radius": {
              "type": "int"
            },
            "skull": {
              "type": "bool"
            },
            "threshold": {
              "type": "bool"
            },
            "vertical_gradient": "Range(min=-1, max=1, min_included=False, max_included=False, msg=None)",
            "functional_mean_thr": {
              "run": {
                "type": "bool"
              },
              "threshold_value": {
                "Any": [
                  {
                    "type": "int"
                  },
                  null
                ]
              }
            },
            "functional_mean_bias_correction": {
              "type": "bool"
            },
            "functional_mean_boolean": true,
            "padding": true,
            "reduce_bias": false,
            "robust": false,
            "remove_eyes": false,
            "surfaces": false
          },
          {
            "frac": {
              "type": "float"
            },
            "mesh_boolean": {
              "type": "bool"
            },
            "outline": {
              "type": "bool"
            },
            "radius": {
              "type": "int"
            },
            "skull": {
              "type": "bool"
            },
            "threshold": {
              "type": "bool"
            },
            "vertical_gradient": "Range(min=-1, max=1, min_included=False, max_included=False, msg=None)",
            "functional_mean_thr": {
              "run": {
                "type": "bool"
              },
              "threshold_value": {
                "Any": [
                  {
                    "type": "int"
                  },
                  null
                ]
              }
            },
            "functional_mean_bias_correction": {
              "type": "bool"
            },
            "functional_mean_boolean": true,
            "remove_eyes": true,
            "reduce_bias": false,
            "robust": false,
            "padding": false,
            "surfaces": false
          },
          {
            "frac": {
              "type": "float"
            },
            "mesh_boolean": {
              "type": "bool"
            },
            "outline": {
              "type": "bool"
            },
            "radius": {
              "type": "int"
            },
            "skull": {
              "type": "bool"
            },
            "threshold": {
              "type": "bool"
            },
            "vertical_gradient": "Range(min=-1, max=1, min_included=False, max_included=False, msg=None)",
            "functional_mean_thr": {
              "run": {
                "type": "bool"
              },
              "threshold_value": {
                "Any": [
                  {
                    "type": "int"
                  },
                  null
                ]
              }
            },
            "functional_mean_bias_correction": {
              "type": "bool"
            },
            "functional_mean_boolean": true,
            "surfaces": true,
            "reduce_bias": false,
            "robust": false,
            "padding": false,
            "remove_eyes": false
          },
          {
            "frac": {
              "type": "float"
            },
            "mesh_boolean": {
              "type": "bool"
            },
            "outline": {
              "type": "bool"
            },
            "radius": {
              "type": "int"
            },
            "skull": {
              "type": "bool"
            },
            "threshold": {
              "type": "bool"
            },
            "vertical_gradient": "Range(min=-1, max=1, min_included=False, max_included=False, msg=None)",
            "functional_mean_thr": {
              "run": {
                "type": "bool"
              },
              "threshold_value": {
                "Any": [
                  {
                    "type": "int"
                  },
                  null
                ]
              }
            },
            "functional_mean_bias_correction": {
              "type": "bool"
            },
            "functional_mean_boolean": {
              "type": "bool"
            },
            "reduce_bias": false,
            "robust": false,
            "padding": false,
            "remove_eyes": false,
            "surfaces": false
          }
        ]
      },
      "FSL_AFNI": {
        "bold_ref": {
          "type": "str"
        },
        "brain_mask": {
          "type": "str"
        },
        "brain_probseg": {
          "type": "str"
        }
      },
      "Anatomical_Refined": {
        "anatomical_mask_dilation": {
          "type": "bool"
        }
      },
      "apply_func_mask_in_native_space": {
        "type": "bool"
      }
    },
    "generate_func_mean": {
      "run": {
        "type": "bool"
      }
    },
    "normalize_func": {
      "run": {
        "type": "bool"
      }
    }
  },
  "nuisance_corrections": {
    "1-ICA-AROMA": {
      "run": {
        "Any": [
          {
            "type": "bool"
          },
          [
            {
              "type": "bool"
            }
          ]
        ]
      },
      "denoising_type": {
        "In": {
          "set": [
            "nonaggr",
            "aggr"
          ]
        }
      }
    },
    "2-nuisance_regression": {
      "run": {
        "Any": [
          {
            "type": "bool"
          },
          [
            {
              "type": "bool"
            }
          ]
        ]
      },
      "create_regressors": {
        "type": "bool"
      },
      "Regressors": {
        "Any": [
          [
            {
              "Name": {
                "type": "str"
              },
              "Censor": {
                "method": {
                  "type": "str"
                },
                "thresholds": [
                  {
                    "type": {
                      "type": "str"
                    },
                    "value": {
                      "type": "float"
                    }
                  }
                ],
                "number_of_previous_trs_to_censor": {
                  "Any": [
                    {
                      "type": "int"
                    },
                    null
                  ]
                },
                "number_of_subsequent_trs_to_censor": {
                  "Any": [
                    {
                      "type": "int"
                    },
                    null
                  ]
                }
              },
              "Motion": {
                "include_delayed": {
                  "type": "bool"
                },
                "include_squared": {
                  "type": "bool"
                },
                "include_delayed_squared": {
                  "type": "bool"
                }
              },
              "aCompCor": {
                "degree": {
                  "type": "int"
                },
                "erode_mask_mm": {
                  "type": "bool"
                },
                "summary": {
                  "method": {
                    "type": "str"
                  },
                  "components": {
                    "type": "int"
                  },
                  "filter": {
                    "type": "str"
                  }
                },
                "threshold": {
                  "type": "str"
                },
                "tissues": [
                  {
                    "type": "str"
                  }
                ],
                "extraction_resolution": {
                  "type": "int"
                }
              },
              "tCompCor": {
                "degree": {
                  "type": "int"
                },
                "erode_mask_mm": {
                  "type": "bool"
                },
                "summary": {
                  "method": {
                    "type": "str"
                  },
                  "components": {
                    "type": "int"
                  },
                  "filter": {
                    "type": "str"
                  }
                },
                "threshold": {
                  "type": "str"
                },
                "tissues": [
                  {
                    "type": "str"
                  }
                ],
                "extraction_resolution": {
                  "type": "int"
                }
              },
              "CerebrospinalFluid": {
                "erode_mask": {
                  "type": "bool"
                },
                "extraction_resolution": {
                  "Any": [
                    {
                      "type": "int"
                    },
                    {
                      "type": "float"
                    },
                    "Functional",
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                        }
                      ]
                    }
                  ]
                },
                "include_delayed": {
                  "type": "bool"
                },
                "include_delayed_squared": {
                  "type": "bool"
                },
                "include_squared": {
                  "type": "bool"
                },
                "summary": {
                  "Any": [
                    {
                      "type": "str"
                    },
                    {
                      "components": {
                        "type": "int"
                      },
                      "method": {
                        "type": "str"
                      }
                    }
                  ]
                }
              },
              "WhiteMatter": {
                "erode_mask": {
                  "type": "bool"
                },
                "extraction_resolution": {
                  "Any": [
                    {
                      "type": "int"
                    },
                    {
                      "type": "float"
                    },
                    "Functional",
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                        }
                      ]
                    }
                  ]
                },
                "include_delayed": {
                  "type": "bool"
                },
                "include_delayed_squared": {
                  "type": "bool"
                },
                "include_squared": {
                  "type": "bool"
                },
                "summary": {
                  "Any": [
                    {
                      "type": "str"
                    },
                    {
                      "components": {
                        "type": "int"
                      },
                      "method": {
                        "type": "str"
                      }
                    }
                  ]
                }
              },
              "GreyMatter": {
                "erode_mask": {
                  "type": "bool"
                },
                "extraction_resolution": {
                  "Any": [
                    {
                      "type": "int"
                    },
                    {
                      "type": "float"
                    },
                    "Functional",
                    {
                      "All": [
                        {
                          "type": "str"
                        },
                        {
                          "pattern": "^[0-9]+(\\.[0-9]*){0,1}[a-z]*(x[0-9]+(\\.[0-9]*){0,1}[a-z]*)*$"
                        }
                      ]
                    }
                  ]
                },
                "include_delayed": {
                  "type": "bool"
                },
                "include_delayed_squared": {
                  "type": "bool"
                },
                "include_squared": {
                  "type": "bool"
                },
                "summary": {
                  "Any": [
                    {
                      "type": "str"
                    },
                    {
                      "components": {
                        "type": "int"
                      },
                      "method": {
                        "type": "str"
                      }
                    }
                  ]
                }
              },
              "GlobalSignal": {
                "summary": {
                  "type": "str"
                }
              },
              "PolyOrt": {
                "degree": {
                  "type": "int"
                }
              },
              "Bandpass": {
                "bottom_frequency": {
                  "type": "float"
                },
                "top_frequency": {
                  "type": "float"
                },
                "method": {
                  "type": "str"
                }
              }
            }
          ],
          null
        ]
      },
      "lateral_ventricles_mask": {
        "Any": [
          {
            "type": "str"
          },
          null
        ]
      },
      "bandpass_filtering_order": {
        "Any": [
          {
            "In": {
              "set": [
                "Before",
                "After"
              ]
            }
          },
          null
        ]
      },
      "regressor_masks": {
        "erode_anatomical_brain_mask": {
          "run": {
            "type": "bool"
          },
          "brain_mask_erosion_prop": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "brain_mask_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "brain_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          }
        },
        "erode_csf": {
          "run": {
            "type": "bool"
          },
          "csf_erosion_prop": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "csf_mask_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "csf_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          }
        },
        "erode_wm": {
          "run": {
            "type": "bool"
          },
          "wm_erosion_prop": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "wm_mask_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "wm_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          }
        },
        "erode_gm": {
          "run": {
            "type": "bool"
          },
          "gm_erosion_prop": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "gm_mask_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          },
          "gm_erosion_mm": {
            "Any": [
              {
                "type": "float"
              },
              {
                "type": "int"
              },
              {
                "All": [
                  {
                    "type": "str"
                  },
                  {
                    "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
                  }
                ]
              }
            ]
          }
        }
      }
    }
  },
  "amplitude_low_frequency_fluctuation": {
    "run": {
      "type": "bool"
    },
    "highpass_cutoff": [
      {
        "type": "float"
      }
    ],
    "lowpass_cutoff": [
      {
        "type": "float"
      }
    ]
  },
  "voxel_mirrored_homotopic_connectivity": {
    "run": {
      "type": "bool"
    },
    "symmetric_registration": {
      "T1w_brain_template_symmetric": {
        "type": "str"
      },
      "T1w_brain_template_symmetric_for_resample": {
        "type": "str"
      },
      "T1w_template_symmetric": {
        "type": "str"
      },
      "T1w_template_symmetric_for_resample": {
        "type": "str"
      },
      "dilated_symmetric_brain_mask": {
        "type": "str"
      },
      "dilated_symmetric_brain_mask_for_resample": {
        "type": "str"
      }
    }
  },
  "regional_homogeneity": {
    "run": {
      "type": "bool"
    },
    "cluster_size": {
      "In": {
        "set": [
          27,
          19,
          7
        ]
      }
    }
  },
  "post_processing": {
    "spatial_smoothing": {
      "output": [
        {
          "In": {
            "set": [
              "nonsmoothed",
              "smoothed"
            ]
          }
        }
      ],
      "smoothing_method": [
        {
          "In": {
            "set": [
              "AFNI",
              "FSL"
            ]
          }
        }
      ],
      "fwhm": [
        {
          "type": "int"
        }
      ]
    },
    "z-scoring": {
      "output": [
        {
          "In": {
            "set": [
              "z-scored",
              "raw"
            ]
          }
        }
      ]
    }
  },
  "timeseries_extraction": {
    "run": {
      "type": "bool"
    },
    "roi_paths_fully_specified": {
      "type": "bool"
    },
    "tse_roi_paths": {
      "Any": [
        {
          "str": {
            "In": {
              "set": [
                "Avg, PearsonCorr, Voxel",
                "Avg, Voxel, PartialCorr, PearsonCorr",
                "PartialCorr, SpatialReg, Voxel, Avg",
                "Avg, PearsonCorr, SpatialReg, Voxel",
                "SpatialReg, Voxel, PearsonCorr, PartialCorr",
                "PartialCorr, Voxel, SpatialReg, PearsonCorr, Avg",
                "Avg, Voxel, PearsonCorr, SpatialReg",
                "SpatialReg, Avg, Voxel, PearsonCorr",
                "Voxel, SpatialReg, PartialCorr, Avg, PearsonCorr",
                "PearsonCorr, Voxel, Avg, PartialCorr",
                "Voxel, PartialCorr, Avg, SpatialReg",
                "Voxel, Avg, PartialCorr, SpatialReg, PearsonCorr",
                "SpatialReg, PartialCorr",
                "SpatialReg, PartialCorr, Avg, PearsonCorr, Voxel",
                "Voxel, PartialCorr, PearsonCorr, Avg, SpatialReg",
                "Avg, PartialCorr",
                "Voxel, Avg, PearsonCorr, SpatialReg",
                "SpatialReg, PartialCorr, Avg, Voxel",
                "PearsonCorr, Avg, SpatialReg, PartialCorr",
                "SpatialReg, PartialCorr, Voxel, Avg",
                "PearsonCorr, Voxel, Avg, PartialCorr, SpatialReg",
                "PearsonCorr, Voxel, PartialCorr, Avg, SpatialReg",
                "SpatialReg, PartialCorr, Voxel, PearsonCorr, Avg",
                "PartialCorr, PearsonCorr, SpatialReg",
                "PearsonCorr, Voxel, SpatialReg, PartialCorr, Avg",
                "SpatialReg, Avg, PearsonCorr, Voxel",
                "Voxel, Avg, SpatialReg, PartialCorr, PearsonCorr",
                "SpatialReg, Avg, Voxel, PartialCorr, PearsonCorr",
                "Avg, PearsonCorr, PartialCorr, SpatialReg, Voxel",
                "PartialCorr, SpatialReg, Voxel, PearsonCorr, Avg",
                "PearsonCorr, PartialCorr, Voxel, Avg",
                "PearsonCorr, Avg, SpatialReg, Voxel",
                "Avg, Voxel, PartialCorr, SpatialReg, PearsonCorr",
                "PearsonCorr, SpatialReg, PartialCorr, Avg",
                "PartialCorr, Avg, PearsonCorr, SpatialReg",
                "SpatialReg, Avg, PartialCorr, Voxel, PearsonCorr",
                "PartialCorr, SpatialReg, PearsonCorr",
                "PartialCorr, Voxel, PearsonCorr, SpatialReg, Avg",
                "Voxel, Avg, PartialCorr",
                "SpatialReg, Avg, PearsonCorr, PartialCorr, Voxel",
                "SpatialReg, PearsonCorr, PartialCorr, Avg",
                "PartialCorr, SpatialReg, PearsonCorr, Voxel, Avg",
                "SpatialReg, PartialCorr, Avg",
                "Voxel, SpatialReg, PartialCorr, Avg",
                "Voxel, PearsonCorr, SpatialReg, Avg, PartialCorr",
                "PearsonCorr, Avg, Voxel, SpatialReg",
                "SpatialReg, Voxel, PartialCorr, PearsonCorr, Avg",
                "PearsonCorr, SpatialReg, Voxel, PartialCorr, Avg",
                "SpatialReg, PearsonCorr, Avg, Voxel, PartialCorr",
                "Voxel, SpatialReg, PearsonCorr, Avg, PartialCorr",
                "SpatialReg, Voxel, Avg",
                "SpatialReg, PearsonCorr, Avg",
                "PearsonCorr, SpatialReg, Avg, PartialCorr",
                "Avg, PartialCorr, Voxel, PearsonCorr, SpatialReg",
                "PearsonCorr, SpatialReg, Voxel, Avg, PartialCorr",
                "PearsonCorr, SpatialReg, PartialCorr, Avg, Voxel",
                "PartialCorr, PearsonCorr, SpatialReg, Voxel, Avg",
                "Avg, SpatialReg, PartialCorr, Voxel, PearsonCorr",
                "Avg, PearsonCorr, SpatialReg, Voxel, PartialCorr",
                "Voxel, PearsonCorr, Avg, SpatialReg",
                "Avg, SpatialReg",
                "PartialCorr, Avg, SpatialReg, Voxel, PearsonCorr",
                "PearsonCorr, Voxel",
                "PartialCorr, Avg, SpatialReg, PearsonCorr, Voxel",
                "Avg, PartialCorr, SpatialReg, PearsonCorr",
                "Voxel, PartialCorr, Avg, PearsonCorr, SpatialReg",
                "PartialCorr, PearsonCorr, Voxel, Avg",
                "Voxel, SpatialReg",
                "Voxel, PartialCorr, SpatialReg, Avg, PearsonCorr",
                "PearsonCorr, PartialCorr, Avg, Voxel, SpatialReg",
                "SpatialReg",
                "Avg, Voxel, SpatialReg, PartialCorr, PearsonCorr",
                "SpatialReg, Voxel, Avg, PartialCorr",
                "Avg, PartialCorr, Voxel, PearsonCorr",
                "Voxel, SpatialReg, PartialCorr, PearsonCorr, Avg",
                "PartialCorr, SpatialReg",
                "SpatialReg, PearsonCorr, PartialCorr, Voxel",
                "Voxel, Avg",
                "Avg, PearsonCorr, SpatialReg, PartialCorr",
                "Avg, PartialCorr, PearsonCorr, Voxel, SpatialReg",
                "Voxel, PartialCorr, SpatialReg, PearsonCorr, Avg",
                "PartialCorr, Avg, SpatialReg",
                "Voxel, PartialCorr, SpatialReg",
                "SpatialReg, PartialCorr, PearsonCorr, Voxel, Avg",
                "PearsonCorr, Voxel, PartialCorr",
                "PartialCorr, SpatialReg, Voxel, PearsonCorr",
                "PearsonCorr, PartialCorr, SpatialReg",
                "PearsonCorr, Avg, Voxel, PartialCorr, SpatialReg",
                "Voxel, SpatialReg, PearsonCorr",
                "SpatialReg, Avg, PartialCorr, PearsonCorr",
                "Voxel, SpatialReg, PearsonCorr, PartialCorr, Avg",
                "SpatialReg, PearsonCorr, Voxel, PartialCorr",
                "PearsonCorr, PartialCorr, Avg, Voxel",
                "Avg, SpatialReg, PearsonCorr, PartialCorr, Voxel",
                "SpatialReg, Voxel, PearsonCorr, Avg",
                "PearsonCorr, PartialCorr, SpatialReg, Voxel",
                "PartialCorr, PearsonCorr, Voxel, SpatialReg",
                "SpatialReg, PearsonCorr",
                "Avg, PearsonCorr, SpatialReg",
                "Avg, SpatialReg, Voxel",
                "PartialCorr, PearsonCorr",
                "PartialCorr, Voxel, PearsonCorr, Avg",
                "Avg, PartialCorr, SpatialReg, PearsonCorr, Voxel",
                "Avg, PartialCorr, Voxel, SpatialReg",
                "Avg, SpatialReg, PearsonCorr, Voxel, PartialCorr",
                "PartialCorr, Voxel, SpatialReg, Avg, PearsonCorr",
                "Avg, PartialCorr, PearsonCorr, SpatialReg",
                "PearsonCorr, Avg, SpatialReg",
                "SpatialReg, Voxel, PartialCorr, Avg",
                "PearsonCorr, SpatialReg, Voxel, PartialCorr",
                "PartialCorr, SpatialReg, Avg, PearsonCorr, Voxel",
                "Avg, PearsonCorr, SpatialReg, PartialCorr, Voxel",
                "SpatialReg, Avg, PearsonCorr, Voxel, PartialCorr",
                "PearsonCorr, Avg, Voxel, SpatialReg, PartialCorr",
                "SpatialReg, Voxel, PearsonCorr, Avg, PartialCorr",
                "PartialCorr, PearsonCorr, SpatialReg, Avg",
                "Avg, Voxel, SpatialReg, PearsonCorr, PartialCorr",
                "SpatialReg, PearsonCorr, Avg, Voxel",
                "PartialCorr, Voxel, SpatialReg, Avg",
                "PartialCorr",
                "PartialCorr, Avg, PearsonCorr, Voxel",
                "PearsonCorr, Voxel, PartialCorr, SpatialReg",
                "PearsonCorr, Avg, SpatialReg, Voxel, PartialCorr",
                "SpatialReg, Voxel, PartialCorr",
                "Avg, PearsonCorr, PartialCorr, Voxel",
                "Avg, SpatialReg, PearsonCorr, PartialCorr",
                "Avg, Voxel, PartialCorr",
                "PearsonCorr, PartialCorr, SpatialReg, Voxel, Avg",
                "Avg",
                "PartialCorr, SpatialReg, PearsonCorr, Voxel",
                "PartialCorr, SpatialReg, Avg, Voxel, PearsonCorr",
                "PearsonCorr, Voxel, PartialCorr, SpatialReg, Avg",
                "Avg, Voxel",
                "Avg, Voxel, PearsonCorr, PartialCorr, SpatialReg",
                "SpatialReg, Avg, PartialCorr, PearsonCorr, Voxel",
                "SpatialReg, Avg, Voxel",
                "Voxel, PearsonCorr",
                "PearsonCorr, PartialCorr, SpatialReg, Avg, Voxel",
                "SpatialReg, Avg, Voxel, PearsonCorr, PartialCorr",
                "PartialCorr, Avg, PearsonCorr",
                "SpatialReg, PartialCorr, PearsonCorr, Avg, Voxel",
                "Voxel, Avg, PartialCorr, SpatialReg",
                "PearsonCorr, Voxel, SpatialReg",
                "Voxel, PearsonCorr, Avg",
                "SpatialReg, PearsonCorr, Avg, PartialCorr, Voxel",
                "Avg, Voxel, PartialCorr, PearsonCorr, SpatialReg",
                "Voxel, SpatialReg, PearsonCorr, PartialCorr",
                "PearsonCorr, SpatialReg, PartialCorr, Voxel",
                "SpatialReg, PearsonCorr, Avg, PartialCorr",
                "SpatialReg, PartialCorr, Voxel, Avg, PearsonCorr",
                "Voxel, PearsonCorr, Avg, PartialCorr, SpatialReg",
                "SpatialReg, Avg, PartialCorr",
                "PartialCorr, Avg",
                "Voxel, PearsonCorr, PartialCorr, SpatialReg, Avg",
                "PearsonCorr, Avg, PartialCorr",
                "PearsonCorr, PartialCorr, Avg",
                "PearsonCorr, SpatialReg, Avg, Voxel",
                "Voxel, PearsonCorr, SpatialReg",
                "PearsonCorr, PartialCorr",
                "Voxel, SpatialReg, PartialCorr",
                "Avg, Voxel, PartialCorr, SpatialReg",
                "PearsonCorr, Voxel, SpatialReg, Avg",
                "PartialCorr, PearsonCorr, Avg, SpatialReg, Voxel",
                "SpatialReg, Avg",
                "SpatialReg, PartialCorr, Voxel, PearsonCorr",
                "SpatialReg, Avg, Voxel, PartialCorr",
                "Avg, Voxel, SpatialReg, PartialCorr",
                "PartialCorr, Avg, Voxel",
                "Voxel, SpatialReg, PartialCorr, PearsonCorr",
                "Voxel, Avg, SpatialReg, PearsonCorr, PartialCorr",
                "SpatialReg, PearsonCorr, PartialCorr",
                "PartialCorr, Voxel, PearsonCorr",
                "PearsonCorr, PartialCorr, SpatialReg, Avg",
                "PearsonCorr, PartialCorr, Avg, SpatialReg",
                "Avg, PartialCorr, PearsonCorr, SpatialReg, Voxel",
                "PearsonCorr, Avg, Voxel",
                "Voxel, PartialCorr, PearsonCorr",
                "Voxel, PearsonCorr, SpatialReg, Avg",
                "PearsonCorr, SpatialReg, PartialCorr, Voxel, Avg",
                "PearsonCorr, Avg, PartialCorr, Voxel, SpatialReg",
                "PearsonCorr, SpatialReg, Voxel",
                "Avg, SpatialReg, Voxel, PartialCorr, PearsonCorr",
                "PearsonCorr, PartialCorr, Avg, SpatialReg, Voxel",
                "PartialCorr, Avg, Voxel, SpatialReg, PearsonCorr",
                "PearsonCorr",
                "PearsonCorr, Voxel, Avg",
                "Voxel, PartialCorr, PearsonCorr, SpatialReg, Avg",
                "Avg, PartialCorr, PearsonCorr",
                "PartialCorr, Avg, SpatialReg, Voxel",
                "PearsonCorr, Avg, PartialCorr, SpatialReg, Voxel",
                "Voxel, SpatialReg, Avg",
                "PearsonCorr, PartialCorr, Voxel, Avg, SpatialReg",
                "Avg, SpatialReg, PearsonCorr, Voxel",
                "Voxel, Avg, SpatialReg, PartialCorr",
                "Voxel",
                "Voxel, PartialCorr, SpatialReg, Avg",
                "Avg, SpatialReg, PartialCorr, PearsonCorr, Voxel",
                "SpatialReg, Voxel, PartialCorr, Avg, PearsonCorr",
                "SpatialReg, PearsonCorr, Voxel",
                "SpatialReg, PartialCorr, PearsonCorr",
                "Voxel, SpatialReg, Avg, PartialCorr",
                "SpatialReg, PearsonCorr, Voxel, Avg",
                "Voxel, SpatialReg, Avg, PearsonCorr, PartialCorr",
                "Avg, PartialCorr, SpatialReg, Voxel",
                "Avg, SpatialReg, PartialCorr",
                "SpatialReg, Avg, PearsonCorr",
                "Voxel, PearsonCorr, PartialCorr",
                "PartialCorr, Voxel, Avg, SpatialReg",
                "SpatialReg, PearsonCorr, Voxel, PartialCorr, Avg",
                "Voxel, SpatialReg, PearsonCorr, Avg",
                "PartialCorr, SpatialReg, PearsonCorr, Avg",
                "PearsonCorr, Voxel, PartialCorr, Avg",
                "PearsonCorr, PartialCorr, Voxel, SpatialReg, Avg",
                "SpatialReg, Voxel, Avg, PartialCorr, PearsonCorr",
                "PartialCorr, PearsonCorr, Avg, SpatialReg",
                "PearsonCorr, SpatialReg, Avg, PartialCorr, Voxel",
                "PearsonCorr, SpatialReg, PartialCorr",
                "PartialCorr, Avg, PearsonCorr, Voxel, SpatialReg",
                "PearsonCorr, SpatialReg, Voxel, Avg",
                "SpatialReg, PearsonCorr, PartialCorr, Voxel, Avg",
                "Avg, PearsonCorr, Voxel, PartialCorr",
                "PartialCorr, PearsonCorr, Voxel, SpatialReg, Avg",
                "PartialCorr, Voxel",
                "PartialCorr, Voxel, Avg, SpatialReg, PearsonCorr",
                "PartialCorr, PearsonCorr, SpatialReg, Voxel",
                "Voxel, PartialCorr",
                "PartialCorr, SpatialReg, PearsonCorr, Avg, Voxel",
                "PartialCorr, PearsonCorr, Avg",
                "PearsonCorr, PartialCorr, Voxel, SpatialReg",
                "PearsonCorr, Avg, SpatialReg, PartialCorr, Voxel",
                "PartialCorr, Voxel, PearsonCorr, SpatialReg",
                "PartialCorr, PearsonCorr, Voxel",
                "PartialCorr, Voxel, Avg",
                "Avg, Voxel, SpatialReg",
                "PartialCorr, SpatialReg, Voxel",
                "SpatialReg, PartialCorr, Avg, PearsonCorr",
                "Avg, PearsonCorr, Voxel, SpatialReg",
                "SpatialReg, Voxel, Avg, PearsonCorr, PartialCorr",
                "SpatialReg, PearsonCorr, Voxel, Avg, PartialCorr",
                "Avg, Voxel, PearsonCorr, SpatialReg, PartialCorr",
                "Avg, Voxel, PearsonCorr, PartialCorr",
                "Avg, PartialCorr, Voxel, SpatialReg, PearsonCorr",
                "Avg, PartialCorr, Voxel",
                "Voxel, SpatialReg, Avg, PearsonCorr",
                "PartialCorr, SpatialReg, Avg, Voxel",
                "PartialCorr, Voxel, SpatialReg, PearsonCorr",
                "SpatialReg, PartialCorr, PearsonCorr, Voxel",
                "SpatialReg, PartialCorr, Avg, Voxel, PearsonCorr",
                "PearsonCorr, SpatialReg",
                "PartialCorr, Avg, SpatialReg, PearsonCorr",
                "PartialCorr, SpatialReg, Voxel, Avg, PearsonCorr",
                "Voxel, Avg, SpatialReg",
                "Avg, SpatialReg, Voxel, PartialCorr",
                "SpatialReg, Voxel, PearsonCorr",
                "Avg, Voxel, PearsonCorr",
                "Voxel, Avg, PartialCorr, PearsonCorr, SpatialReg",
                "PearsonCorr, Voxel, SpatialReg, Avg, PartialCorr",
                "SpatialReg, PearsonCorr, PartialCorr, Avg, Voxel",
                "PartialCorr, Avg, PearsonCorr, SpatialReg, Voxel",
                "PearsonCorr, Avg, PartialCorr, Voxel",
                "PearsonCorr, Voxel, Avg, SpatialReg, PartialCorr",
                "Avg, SpatialReg, PartialCorr, Voxel",
                "Voxel, Avg, PartialCorr, PearsonCorr",
                "PartialCorr, Avg, Voxel, PearsonCorr, SpatialReg",
                "Voxel, PartialCorr, Avg, PearsonCorr",
                "PearsonCorr, Voxel, Avg, SpatialReg",
                "Voxel, PartialCorr, PearsonCorr, SpatialReg",
                "Voxel, Avg, PearsonCorr, SpatialReg, PartialCorr",
                "Avg, SpatialReg, Voxel, PearsonCorr",
                "SpatialReg, Avg, PearsonCorr, PartialCorr",
                "Avg, PartialCorr, SpatialReg",
                "SpatialReg, Voxel, PartialCorr, PearsonCorr",
                "Voxel, PearsonCorr, PartialCorr, Avg, SpatialReg",
                "SpatialReg, PartialCorr, PearsonCorr, Avg",
                "SpatialReg, Voxel, PearsonCorr, PartialCorr, Avg",
                "Voxel, Avg, PearsonCorr, PartialCorr",
                "PartialCorr, Voxel, PearsonCorr, Avg, SpatialReg",
                "PearsonCorr, Avg",
                "Voxel, SpatialReg, Avg, PartialCorr, PearsonCorr",
                "PearsonCorr, SpatialReg, Avg",
                "Voxel, PartialCorr, PearsonCorr, Avg",
                "Voxel, PearsonCorr, SpatialReg, PartialCorr",
                "Voxel, PearsonCorr, Avg, SpatialReg, PartialCorr",
                "PartialCorr, Avg, Voxel, PearsonCorr",
                "SpatialReg, Voxel, Avg, PearsonCorr",
                "Avg, Voxel, SpatialReg, PearsonCorr",
                "PartialCorr, PearsonCorr, Voxel, Avg, SpatialReg",
                "Avg, SpatialReg, PartialCorr, PearsonCorr",
                "PartialCorr, SpatialReg, Avg",
                "SpatialReg, Voxel",
                "PartialCorr, PearsonCorr, SpatialReg, Avg, Voxel",
                "Voxel, Avg, PearsonCorr, PartialCorr, SpatialReg",
                "PartialCorr, Voxel, SpatialReg",
                "PartialCorr, Voxel, Avg, PearsonCorr, SpatialReg",
                "PartialCorr, Avg, Voxel, SpatialReg",
                "Voxel, PearsonCorr, Avg, PartialCorr",
                "SpatialReg, PartialCorr, Voxel",
                "PearsonCorr, Voxel, SpatialReg, PartialCorr",
                "PearsonCorr, SpatialReg, Avg, Voxel, PartialCorr",
                "Avg, PearsonCorr, PartialCorr, SpatialReg",
                "Voxel, PearsonCorr, SpatialReg, PartialCorr, Avg",
                "PearsonCorr, Avg, PartialCorr, SpatialReg",
                "Avg, PearsonCorr",
                "Voxel, Avg, SpatialReg, PearsonCorr",
                "Avg, SpatialReg, Voxel, PearsonCorr, PartialCorr",
                "PearsonCorr, Avg, Voxel, PartialCorr",
                "Voxel, PearsonCorr, PartialCorr, SpatialReg",
                "Voxel, PartialCorr, SpatialReg, PearsonCorr",
                "Avg, SpatialReg, PearsonCorr",
                "Voxel, PartialCorr, Avg",
                "Voxel, Avg, PearsonCorr",
                "Voxel, PartialCorr, Avg, SpatialReg, PearsonCorr",
                "PartialCorr, SpatialReg, Avg, PearsonCorr",
                "SpatialReg, Avg, PartialCorr, Voxel",
                "PartialCorr, Voxel, Avg, PearsonCorr",
                "Avg, PearsonCorr, PartialCorr, Voxel, SpatialReg",
                "Avg, PearsonCorr, PartialCorr",
                "Avg, PartialCorr, SpatialReg, Voxel, PearsonCorr",
                "Avg, PartialCorr, PearsonCorr, Voxel",
                "PearsonCorr, PartialCorr, Voxel",
                "Voxel, PearsonCorr, PartialCorr, Avg",
                "Avg, PearsonCorr, Voxel, SpatialReg, PartialCorr",
                "PartialCorr, PearsonCorr, Avg, Voxel, SpatialReg",
                "Avg, PearsonCorr, Voxel, PartialCorr, SpatialReg",
                "PartialCorr, PearsonCorr, Avg, Voxel"
              ]
            }
          }
        },
        null
      ]
    },
    "realignment": {
      "In": {
        "set": [
          "ROI_to_func",
          "func_to_ROI"
        ]
      }
    }
  },
  "seed_based_correlation_analysis": {
    "run": {
      "type": "bool"
    },
    "roi_paths_fully_specified": {
      "type": "bool"
    },
    "sca_roi_paths": {
      "Any": [
        {
          "str": {
            "In": {
              "set": [
                "Avg, MultReg",
                "Avg, MultReg, DualReg",
                "DualReg, Avg",
                "DualReg, MultReg, Avg",
                "DualReg, Avg, MultReg",
                "Avg, DualReg, MultReg",
                "MultReg, Avg, DualReg",
                "Avg",
                "MultReg, DualReg, Avg",
                "Avg, DualReg",
                "MultReg, DualReg",
                "MultReg",
                "DualReg",
                "DualReg, MultReg",
                "MultReg, Avg"
              ]
            }
          }
        },
        null
      ]
    },
    "norm_timeseries_for_DR": {
      "type": "bool"
    }
  },
  "network_centrality": {
    "run": {
      "type": "bool"
    },
    "memory_allocation": {
      "Any": [
        {
          "type": "float"
        },
        {
          "type": "int"
        },
        {
          "All": [
            {
              "type": "str"
            },
            {
              "pattern": "^([0-9]+(\\.[0-9]*)*(e)-{0,1}[0-9]+)*$"
            }
          ]
        }
      ]
    },
    "template_specification_file": {
      "type": "str"
    },
    "degree_centrality": {
      "weight_options": [
        {
          "In": [
            "Binarized",
            "Weighted"
          ]
        }
      ],
      "correlation_threshold_option": {
        "In": [
          "Significance threshold",
          "Sparsity threshold",
          "Correlation threshold"
        ]
      },
      "correlation_threshold": "Range(min=-1, max=1, min_included=True, max_included=True, msg=None)"
    },
    "eigenvector_centrality": {
      "weight_options": [
        {
          "In": [
            "Binarized",
            "Weighted"
          ]
        }
      ],
      "correlation_threshold_option": {
        "In": [
          "Significance threshold",
          "Sparsity threshold",
          "Correlation threshold"
        ]
      },
      "correlation_threshold": "Range(min=-1, max=1, min_included=True, max_included=True, msg=None)"
    },
    "local_functional_connectivity_density": {
      "weight_options": [
        {
          "In": [
            "Binarized",
            "Weighted"
          ]
        }
      ],
      "correlation_threshold_option": {
        "In": [
          "Significance threshold",
          "Correlation threshold"
        ]
      },
      "correlation_threshold": "Range(min=-1, max=1, min_included=True, max_included=True, msg=None)"
    }
  },
  "PyPEER": {
    "run": {
      "type": "bool"
    },
    "eye_scan_names": [
      {
        "type": "str"
      }
    ],
    "data_scan_names": [
      {
        "type": "str"
      }
    ],
    "eye_mask_path": {
      "type": "str"
    },
    "stimulus_path": {
      "Any": [
        {
          "type": "str"
        },
        null
      ]
    },
    "minimal_nuisance_correction": {
      "peer_gsr": {
        "type": "bool"
      },
      "peer_scrub": {
        "type": "bool"
      },
      "scrub_thresh": {
        "type": "float"
      }
    }
  }
}